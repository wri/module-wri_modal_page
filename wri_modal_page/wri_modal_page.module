<?php

/**
 * @file
 * Main file for the Modal Page.
 */

/**
 * Implements hook_theme().
 */
function wri_modal_page_theme() {
  return array(
    'modal_page_modal' => array(
      'render element' => 'elements',
      'template' => 'templates/modal_page_modal',
      'variables' => array('title' => NULL, 'text' => NULL, 'button' => NULL),
    ),
  );
}

/**
 * Implements hook_page_build().
 */

function wri_modal_page_page_build(&$page) {

  $path_modal_page = drupal_get_path('module', 'wri_modal_page');

  /** 
   * hack to call different jquery version for auth users to avoid issues with 
   * version conflict and certain admin tools -- yes this breaks the modal for 
   * auth users
   */

  if (!user_is_logged_in()) {
    $page['content']['#attached']['js'][] = array(
      'type' => 'external',
      //'data' => 'https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js',
      'data' => 'https://code.jquery.com/jquery-1.9.1.min.js',
    );
  }

  if (!user_is_logged_in()) {
    $page['content']['#attached']['js'][] = array(
      'type' => 'external',
      'data' => 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js',
    );
  }

  $page['content']['#attached']['css'][] = array(
    'type' => 'file',
    'data' => $path_modal_page . '/css/modal_page.css',
  );

  $modal_page_settings = variable_get('modal_page_modals');

  if (empty($modal_page_settings)) {
    return FALSE;
  }

  $modals_settings = explode(PHP_EOL, $modal_page_settings);

  foreach ($modals_settings as $modal_settings) {

    // Default values.
    $path = $title = $text = $button = '';

    $modal = explode('|', $modal_settings);

    if (!empty($modal[0])) {
      $path = $modal[0];
    }

    if ($path != '<front>' && $path != '<all>') {
      $path = filter_xss($modal[0]);
      $path = trim($path);
    }

    if (!empty($modal[1])) {
      $title = filter_xss($modal[1]);
      $title = trim($title);
    }

    // Check HTML tags.
    $modal_page_allowed_tags = variable_get('modal_page_allowed_tags');

    if (!empty($modal_page_allowed_tags)) {
      $modal_page_allowed_tags = explode(PHP_EOL, $modal_page_allowed_tags);
      $modal_page_allowed_tags = preg_replace('/\s/', '', $modal_page_allowed_tags);
    }

    if (!empty($modal[2])) {
      $text = empty($modal_page_allowed_tags) ? filter_xss($modal[2]) : filter_xss($modal[2], $modal_page_allowed_tags);
      $text = trim($text);
    }

    if (!empty($modal[3])) {
      $button = filter_xss($modal[3]);
      $button = trim($button);
    }

    $current_path = drupal_get_path_alias(current_path());

    if (drupal_is_front_page()) {
      $current_path = '<front>';
    }

    if ($path == $current_path || $path == '<all>') {

      /**
       * commenting out js script call, calling it from the tpl file
       * instead so that it will load some vars generated in php on the tpl
       */

      //$page['content']['#attached']['js'][] = array(
      //  'type' => 'file',
      //  'data' => $path_modal_page . '/js/modal_page.js',
      //);

      $modal = theme('modal_page_modal', array(
        'title' => $title,
        'text' => $text,
        'button' => $button,
      ));

      $page['page_top']['slidedown_templates'] = array(
        '#weight' => -1000,
        '#markup' => $modal,
      );

      break;
    }
  }
}

/**
 * Implements hook_menu().
 */
function wri_modal_page_menu() {

  $items = array();

  $items['admin/config/user-interface/modal-page'] = array(
    'title' => 'Modal Page',
    'description' => 'Configuration for Modal Page module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('modal_page_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Function modal_page_settings.
 */
function wri_modal_page_settings($form, &$form_state) {

  $form['modal_page_modals'] = array(
    '#title' => t('Modal Should Appear On:'),
    '#type' => 'textfield',
    //'#description' => t('Insert values with format: <br><br><b>Page|Title|Text|Button</b> &lt;front&gt; is the front page.<br><br> e.g.  <b>Home|Welcome|Welcome to our new website|Thanks</b>'),
    '#description' => t('List page paths. Use &lt;front&gt; for the front page and &lt;all&gt; for all pages<br><br>A cookie is set when dismissed to prevent the modal from returning (set to expire after 1 day): add ?killcookie=giving to the url to erase the cookie<br><br>Currently the button and custom text options are suppressed, and the modal pulls in whatever image is uploaded to our S3 bucket at https://s3.amazonaws.com/wriorg/modals-notices/givingtuesday.png<br><br>NOTE: the modal will not display for authenticated users, even if you kill the cookie'),
    '#default_value' => variable_get('modal_page_modals', ''),
    '#size' => 130,
    '#resizable' => FALSE,
  );

  $form['modal_page_file_location'] = array(
    '#title' => t('Image file location (url):'),
    '#type' => 'textfield',
    '#description' => t('Full path of the image to use (can be anywhere but usually located on our AWS S3 bucket at wriorg/modals-notices/your-file-name i.e. https://s3.amazonaws.com/wriorg/modals-notices/givingtuesday.png'),
    '#default_value' => variable_get('modal_page_file_location', ''),
    '#size' => 130,
    '#resizable' => FALSE,
  );

  $form['modal_page_modal_name'] = array(
    '#title' => t('Name for this Modal'),
    '#type' => 'textfield',
    '#description' => t('A machine readable name for the modal: this will be used as the cookie name AND for the Google Analytics "event action" name. Be sure to use a different name every time you launch a new modal or else the old cookie will be triggered'),
    '#default_value' => variable_get('modal_page_modal_name', ''),
    '#size' => 130,
    '#resizable' => FALSE,
  );

  $form['modal_page_cookie_exp'] = array(
    '#title' => t('Cookie duration (optional)'),
    '#type' => 'textfield',
    '#description' => t('Set the expiration of the cookie (how many days before it expires on a user\'s browser) -- set this as a value of 1 to 30'),
    '#default_value' => variable_get('modal_page_cookie_exp', ''),
    '#size' => 6,
    '#resizable' => FALSE,
  );

  $form['modal_page_advanced_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['modal_page_advanced_settings']['modal_page_allowed_tags'] = array(
    '#title' => t('Allowed HTML Tags in the Text (filter_xss)'),
    '#type' => 'textarea',
    '#description' => t('Modal Page use filter_xss function to Filters HTML to prevent cross-site-scripting (XSS) vulnerabilities. <br>Optionally you can insert your allowed tags. Use one per line. E.g:<ul><li>a</li><li>strong</li><li>ul</li><li>li</li>'),
    '#default_value' => variable_get('modal_page_allowed_tags', ''),
    '#size' => 10,
    '#resizable' => FALSE,
  );

  return system_settings_form($form);
}
